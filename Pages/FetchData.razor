@page "/mfp-data-analysis"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILogger<FetchData> Logger

@using Microsoft.Extensions.Logging
@using RestSharp

<PageTitle>MFP Data Analysis | islandmonkey.uk</PageTitle>

<h1>MFP Data Analysis</h1>

<p><b>Problem:</b> When trying to analyse nutrition data inside the MyFitnessPal app, you have two options, by individual day, or by calendar week.</p>
<p><b>Solution: MFP Data Analyser!</b> If you have purchased MyFitnessPal Premium, you can export your nutritional data to a CSV file. Upload your CSV file here for advanced analysis of the data. Features include:</p>
<ul>
    <li>Analysis of any nutritional data for any range of dates, weeks, or months</li>
    <li>Isolate nutritional data as a date range of breakfasts, lunches, dinners, snacks...</li>
    <li>Understand your nutritional data in more detail.</li>
</ul>

<em>You need MyFitnessPal Premium to export CSV files. Additionally, by using this tool, you agree to this website's <a href="/privacy-policy">privacy policy</a> and the <a href="/tos">terms of service</a>.</em>



<!--Heavily modified but from
    https://github.com/dotnet/blazor-samples/blob/547f2f8609a80525cfc1a2d0d00b5292f9ed8718/7.0/BlazorSample_WebAssembly/Pages/file-uploads/FileUpload1.razor
    The MIT License (MIT) Copyright (c) Microsoft Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

<h3>Upload Files</h3>

<p>
    <label>
        Maximum file size 50kB:
        <InputFile OnChange="@LoadFile" accept="text/csv" />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}

<!-- iframe of NutritionDataView creates frame of entire website, which isn't what I want. TODO display NutritionDataView properly here. -->
@code {

    public FetchData() {}

    private IBrowserFile loadedFile;

    public FetchData(IBrowserFile loadedFile) => this.loadedFile = loadedFile;

    public long maxFileSize = 50001;
    private bool isLoading;
    private Stream? readLoadedFile;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFile = e.File;
        try
        {
            if(await IsMFPCSV() && loadedFile.ContentType.Equals("text/csv") && IsReasonableSize())
            {
                readLoadedFile = loadedFile.OpenReadStream();
                // What needs to happen here is this is where I'll probably hook all the Amazon S3 and CsvHelper logic
            }
            else if(!await IsMFPCSV() && !loadedFile.ContentType.Equals("text/csv") && !IsReasonableSize())
            {
                await JSRuntime.InvokeVoidAsync("alert", "File: {FileName} Error: File uploaded exceeds maximum limit, or is not a CSV file. Aborting.");
                Logger.LogError("File: {FileName} Error: File uploaded exceeds maximum limit, or is not a MyFitnessPal CSV file. Aborting.",loadedFile.Name);
                return;
                throw new Exception();

            }

        }
        catch (Exception ex)
        {
            Logger.LogError("File: {FileName} Error: {Error}",
               loadedFile.Name, ex.Message);
        }
        isLoading = false;
    }

    private bool IsReasonableSize()
    {
        if(loadedFile.Size < 50001)
        {
            return true;
        }
        else if(loadedFile.Size > 50001)
        {
            return false;
        }
        return false;
    }

    private async Task<bool> IsMFPCSV()
    {
        try
        {
            using (var stream = loadedFile.OpenReadStream())
            using (var openedFile = new StreamReader(stream))
            {
                const string expectedItems = "Date,Meal,Calories,Fat (g),Saturated Fat,Polyunsaturated Fat,Monounsaturated Fat,Trans Fat,Cholesterol,Sodium (mg),Potassium,Carbohydrates (g),Fiber,Sugar,Protein (g),Vitamin A,Vitamin C,Calcium,Iron,Note";
                string? firstLine = await openedFile.ReadLineAsync();


                if (firstLine.Equals(expectedItems))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        catch(Exception ex)
        {
            Logger.LogError("File: {FileName} Error: Unable to read {FileName}", loadedFile.Name, loadedFile.Name);
            return false;
        }
    }
/* TBD -- need to find a way that secures down the API key
    private async Task RunVirusScanner() {
        var options = new RestClientOptions("https://www.virustotal.com/api/v3/files");
        var client = new RestClient(options);
        var request = new RestRequest("");
        request.AlwaysMultipartFormData = true;
        request.AddHeader("accept", "application/json");
        request.AddHeader("x-apikey", APIKEY);
        request.FormBoundary = "---011000010111000001101001";
        request.AddFile("file", loadedFile.Name);
        var response = await client.PostAsync(request);

        Console.WriteLine("{0}", response.Content);
    }
}
*/