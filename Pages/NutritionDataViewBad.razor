@page "/nutrition-data-view-bad"
<div class="nutrition-data-date-selection">
    <label for="date-meal-select">Select date and meal:</label>
    <select name="date-meal-select" id="date-meal-select" @bind="selectedDateRangeAndMealType">
        <!-- Single Day -->
        <option value="single-day-breakfast" @bind="selectedMealType">Singleday</option>
        <option value="single-day-lunch">@singleDayLunch</option>
        <option value="single-day-dinner">@singleDayDinner</option>
        <option value="single-day-snacks">@singleDaySnacks</option>
        <option value="single-day-all-meals">@singleDayAllMeals</option>

        <!-- Date Range -->
        <option value="date-range-breakfast">@dateRangeBreakfast</option>
        <option value="date-range-lunch">@dateRangeLunch</option>
        <option value="date-range-dinner">@dateRangeDinner</option>
        <option value="date-range-snacks">@dateRangeSnacks</option>
        <option value="date-range-all-meals">@dateRangeAllMeals</option>

        <!-- Month Select -->
        <option value="month-select-breakfast">@monthSelectBreakfast</option>
        <option value="month-select-lunch">@monthSelectLunch</option>
        <option value="month-select-dinner">@monthSelectDinner</option>
        <option value="month-select-snacks">@monthSelectSnacks</option>
        <option value="month-select-all-meals">@monthSelectAllMeals</option>

        <!-- Eternity -->
        <option value="eternity-breakfast">@eternityBreakfast</option>
        <option value="eternity-lunch">@eternityLunch</option>
        <option value="eternity-dinner">@eternityDinner</option>
        <option value="eternity-snacks">@eternitySnacks</option>
        <option value="eternity-all-meals">@eternityAllMeals</option>
    </select>
</div>
@if (selectedDateRangeAndMealType == singleDayBreakfast ||
     selectedDateRangeAndMealType == singleDayLunch ||
     selectedDateRangeAndMealType == singleDayDinner ||
     selectedDateRangeAndMealType == singleDaySnacks ||
     selectedDateRangeAndMealType == singleDayAllMeals)
{
    <div>
        <label for="single-day">Select a single day:</label>
        <select id="single-day">
            <option @bind="selectedSingleDay">@PopulateDateValues()</option>
        </select>
    </div>
}
else if (selectedDateRangeAndMealType == dateRangeBreakfast ||
         selectedDateRangeAndMealType == dateRangeLunch ||
         selectedDateRangeAndMealType == dateRangeDinner ||
         selectedDateRangeAndMealType == dateRangeSnacks ||
         selectedDateRangeAndMealType == dateRangeAllMeals)
{
    <div>
        <label for="start-date">Start date:</label>
        <select id="start-date">
            <option @bind="selectedStartDate">@PopulateDateValues()</option>
        </select>
        <label for="end-date">End date:</label>
        <select id="end-date">
            <option @bind="selectedEndDate">@PopulateDateValues()</option>
        </select>
    </div>
}
else if (selectedDateRangeAndMealType == monthSelectBreakfast ||
         selectedDateRangeAndMealType == monthSelectLunch ||
         selectedDateRangeAndMealType == monthSelectDinner ||
         selectedDateRangeAndMealType == monthSelectSnacks ||
         selectedDateRangeAndMealType == monthSelectAllMeals)
{
    <div>
        <label for="month">Select a month:</label>
        <select id="month">
            <option @bind="selectedMonth">
                @{ PopulateMonthValues().ForEach(month => DateTimeFormatInfo.CurrentInfo.GetMonthName(month)); }
            </option>
        </select>
    </div>
}
else if (selectedDateRangeAndMealType == eternityBreakfast ||
         selectedDateRangeAndMealType == eternityLunch ||
         selectedDateRangeAndMealType == eternityDinner ||
         selectedDateRangeAndMealType == eternitySnacks ||
         selectedDateRangeAndMealType == eternityAllMeals)
{
}

<div class="nutrition-data-checkbox-selection">
    <p>Show nutrition type:</p>

    <input type="checkbox" id="calories"><label for="calories">Calories</label>
    <input type="checkbox" id="fat"><label for="fat">Fat</label>
    <input type="checkbox" id="saturated-fat"><label for="saturated-fat">Saturated Fat</label>
    <input type="checkbox" id="polyunsaturated-fat"><label for="polyunsaturated-fat">Polyunsaturated Fat</label>
    <input type="checkbox" id="monounsaturated-fat"><label for="monounsaturated-fat">Monounsaturated Fat</label>
    <input type="checkbox" id="trans-fat"><label for="trans-fat">Trans Fat</label>
    <input type="checkbox" id="carbohydrates"><label for="carbohydrates">Carbohydrates</label>
    <input type="checkbox" id="sugar"><label for="sugar">Sugar</label>
    <input type="checkbox" id="protein"><label for="protein">Protein</label>
    <input type="checkbox" id="fiber"><label for="fiber">Fibre</label>
    <input type="checkbox" id="cholestrol"><label for="cholestrol">Cholesterol</label>
    <input type="checkbox" id="sodium"><label for="sodium">Sodium</label>
    <input type="checkbox" id="potassium"><label for="potassium">Potassium</label>
    <input type="checkbox" id="vitamin-a"><label for="vitamin-a">Vitamin A</label>
    <input type="checkbox" id="vitamin-c"><label for="vitamin-c">Vitamin C</label>
    <input type="checkbox" id="calcium"><label for="calcium">Calcium</label>
    <input type="checkbox" id="iron"><label for="iron">Iron</label>
    <input type="checkbox" id="notes"><label for="notes">Show notes</label>
</div>
<div class="nutrition-data-details">
    <!--
    @if (selectedDateRangeAndMealType == singleDayBreakfast ||
         selectedDateRangeAndMealType == singleDayLunch ||
         selectedDateRangeAndMealType == singleDayDinner ||
         selectedDateRangeAndMealType == singleDaySnacks ||
         selectedDateRangeAndMealType == singleDayAllMeals)
    {
        <p>On selectedSingleDay, you consumed, for 
            @(selectedDateRangeAndMealType == singleDayAllMeals ? "<span>all meals</span>" :
                selectedDateRangeAndMealType == singleDayBreakfast ? "<span>breakfast</span>" :
                    selectedDateRangeAndMealType == singleDayLunch ? "<span>lunch</span>" :
                        selectedDateRangeAndMealType == singleDayDinner ? "<span>dinner</span>" :
                            selectedDateRangeAndMealType == singleDaySnacks ? "<span>snacks</span>" : "")
            :</p>
    }
    else if (selectedDateRangeAndMealType == dateRangeBreakfast ||
             selectedDateRangeAndMealType == dateRangeLunch ||
             selectedDateRangeAndMealType == dateRangeDinner ||
             selectedDateRangeAndMealType == dateRangeSnacks ||
             selectedDateRangeAndMealType == dateRangeAllMeals)
    {
        <p>Between selectedStartDate and selectedEndDate, you consumed, for 
            @(selectedDateRangeAndMealType == dateRangeAllMeals ? "<span>all meals</span>" :
                selectedDateRangeAndMealType == dateRangeBreakfast ? "<span>breakfast</span>" :
                    selectedDateRangeAndMealType == dateRangeLunch ? "<span>lunch</span>" :
                        selectedDateRangeAndMealType == dateRangeDinner ? "<span>dinner</span>" :
                            selectedDateRangeAndMealType == dateRangeSnacks ? "<span>snacks</span>" : "")
            :</p>
    }
    else if (selectedDateRangeAndMealType == monthSelectBreakfast ||
             selectedDateRangeAndMealType == monthSelectLunch ||
             selectedDateRangeAndMealType == monthSelectDinner ||
             selectedDateRangeAndMealType == monthSelectSnacks ||
             selectedDateRangeAndMealType == monthSelectAllMeals)
    {
        <p>In selectedMonth, you consumed, for 
            @(selectedDateRangeAndMealType == monthSelectAllMeals ? "<span>all meals</span>" :
                selectedDateRangeAndMealType == monthSelectBreakfast ? "<span>breakfast</span>" :
                    selectedDateRangeAndMealType == monthSelectLunch ? "<span>lunch</span>" :
                        selectedDateRangeAndMealType == monthSelectDinner ? "<span>dinner</span>" :
                            selectedDateRangeAndMealType == monthSelectSnacks ? "<span>snacks</span>" : "")
            :</p>
    }
    else if (selectedDateRangeAndMealType == eternityBreakfast ||
             selectedDateRangeAndMealType == eternityLunch ||
             selectedDateRangeAndMealType == eternityDinner ||
             selectedDateRangeAndMealType == eternitySnacks ||
             selectedDateRangeAndMealType == eternityAllMeals)
    {
        <p>Since the beginning of time, you consumed, for 
            @(selectedDateRangeAndMealType == eternityAllMeals ? "<span>all meals</span>" :
                selectedDateRangeAndMealType == eternityBreakfast ? "<span>breakfast</span>" :
                    selectedDateRangeAndMealType == eternityLunch ? "<span>lunch</span>" :
                        selectedDateRangeAndMealType == eternityDinner ? "<span>dinner</span>" :
                            selectedDateRangeAndMealType == eternitySnacks ? "<span>snacks</span>" : "")
            :</p>
    } -->
    <ul>
        <li>AMOUNT calories,</li>
        <li>
            AMOUNTg of fat,
            <ul>
                <li>of which AMOUNTg was saturated fat,</li>
                <li>AMOUNTg was polyunsaturated fat,</li>
                <li>AMOUNTg was monounsaturated-fat,</li>
                <li>and AMOUNTg was trans fat.</li>
            </ul>
        </li>
        <li>
            AMOUNTg of carbohydrates,
            <ul>
                <li>of which AMOUNTg was sugar,</li>
            </ul>
        </li>
        <li>AMOUNTg of fibre,</li>
        <li>AMOUNTg of protein,</li>
        <li>AMOUNTmg of cholestrol,</li>
        <li>and AMOUNTmg of salt.</li>
    </ul>
    Additionally, you consumed these micronutrients:
    <ul>
        <li>AMOUNT of potassium,</li>
        <li>AMOUNT of vitamin A,</li>
        <li>AMOUNT of vitamin C,</li>
        <li>AMOUNT of calcium,</li>
        <li>and AMOUNT of iron.</li>
    </ul>
    <p>There were no notes for this @selectedDateRangeAndMealType <!-- Change to look more refined in the future --> </p>
</div>

@code {
    readonly FileUpload fileUpload = new();
    NutritionModel nutritionModel = new();

    private DateOnly selectedSingleDay;
    private DateOnly selectedStartDate;
    private DateOnly selectedEndDate;
    private List<int> months;

    private string selectedDateRangeAndMealType = string.Empty;
    private string selectedMonth = string.Empty;
    private readonly string singleDayAllMeals = "Single day, all meals";
    private readonly string dateRangeAllMeals = "Date range, all meals";
    private readonly string monthSelectAllMeals = "Month, all meals";
    private readonly string eternityAllMeals = "The beginning of time, all meals";
    private readonly string singleDayBreakfast = "Single day, breakfast";
    private readonly string singleDayLunch = "Single day, lunch";
    private readonly string singleDayDinner = "Single day, dinner";
    private readonly string singleDaySnacks = "Single day, snacks";
    private readonly string dateRangeBreakfast = "Date range, breakfast";
    private readonly string dateRangeLunch = "Date range, lunch";
    private readonly string dateRangeDinner = "Date range, dinner";
    private readonly string dateRangeSnacks = "Date range, snacks";
    private readonly string monthSelectBreakfast = "Month, breakfast";
    private readonly string monthSelectLunch = "Month, lunch";
    private readonly string monthSelectDinner = "Month, dinner";
    private readonly string monthSelectSnacks = "Month, snacks";
    private readonly string eternityBreakfast = "The beginning of time, breakfast";
    private readonly string eternityLunch = "The beginning of time, lunch";
    private readonly string eternityDinner = "The beginning of time, dinner";
    private readonly string eternitySnacks = "The beginning of time, snacks";

    private List<DateOnly> PopulateDateValues()
    {
        var dates = from a in fileUpload.records
            select a.Date;
        var dateList = dates.ToList();
        return dateList;
    }

    private string GetEarliestDay()
    {
        string earliestDate;
        DateOnlyConverter converter = new();
        return earliestDate = fileUpload.records.Min(record => record.Date).ToString();
    }

    private List<int> PopulateMonthValues()
    {
        var dates = from a in fileUpload.records
            select a.Date;

        foreach (var date in dates)
        {
            months = dates
                .Select(a => date.Month).ToList();
        }
        return months;
    }

    private void GetSingleDayBreakfastValues()
    {
        var calories = from c in fileUpload.records
            where (c.Date == selectedSingleDay) & (c.Meal == "Breakfast")
            select c.Calories;
    }

    private void GetSingleDayAllMealValues()
    {
        var calories = from c in fileUpload.records
            where c.Date == selectedSingleDay
            select c.Calories;
    }

    private void GetSelectedDateRangeAndSingleMealValues()
    {
    }

    private void GetSelectedDateRangeAndAllMealValues()
    {
    }

    private void GetCalendarMonthSingleMealValues()
    {
    }

    private void GetCalendarMonthAllMealValues()
    {
    }

    private void GetEternitySingleMealValues()
    {
    }

    private void GetEternityAllMealValues()
    {
    }

    private void FindLatestMonth()
    {
    }

}