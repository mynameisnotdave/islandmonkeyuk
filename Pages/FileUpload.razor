@page "/mfp-data-analysis"
@inject IJSRuntime JSRuntime
@inject ILogger<FileUpload> Logger  
@using Microsoft.Extensions.Logging
@using RestSharp
@using static System.Globalization.CultureInfo

<PageTitle>MFP Data Analysis | islandmonkey.uk</PageTitle>

<h1>MFP Data Analysis</h1>

<p><b>Problem:</b> When trying to analyse nutrition data inside the MyFitnessPal app, you have two options, by individual day, or by calendar week.</p>

<p><b>Solution: MFP Data Analyser!</b> If you have purchased MyFitnessPal Premium, you can export your nutritional data to a CSV file. Upload your CSV file here for advanced analysis of the data. Features include:</p>

<ul>
    <li>Analysis of any nutritional data for any range of dates, weeks, or months</li>
    <li>Isolate nutritional data as a date range of breakfasts, lunches, dinners, snacks...</li>
    <li>Understand your nutritional data in more detail.</li>
</ul>

<em>You need MyFitnessPal Premium to export CSV files. Additionally, by using this tool, you agree to this website's <a href="/privacy-policy">privacy policy</a> and the <a href="/tos">terms of service</a>.</em>

<h3>Upload Files</h3>

<p>
    <label>
        Maximum file size 50kB:
        <InputFile OnChange="LoadFile" accept="text/csv" />
    </label>
</p>

@if(loadingSuccess) {
    <NutritionDataView />
} else {
    <span class="loading-error-message">Failed to load CSV file. Please make sure that it is a MyFitnessPal CSV file that you are uploading and try again.</span>
}

@code {
    public FileUpload() {}

    public long maxFileSize = 50001;
    public IAsyncEnumerable<NutritionModel> records { get; set; }
    private bool loadingSuccess;
    string[]? csvHeaders;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        int randomFileNumber = 1;

        if (e.File.Size < maxFileSize && e.File.ContentType.Equals("text/csv"))
        {
            await using FileStream fs = new($"csv{randomFileNumber:D6}.csv", FileMode.Create);
            await e.File.OpenReadStream().CopyToAsync(fs);
            fs.Position = 0;

            var config = new CsvConfiguration(CultureInfo.InvariantCulture) 
            {
                Delimiter = ","
            };

            using var reader = new StreamReader(fs);
            using var csv = new CsvReader(reader, config);
            string expectedHeaderValues = "Date,Meal,Calories,Fat (g),Saturated Fat,Polyunsaturated Fat,Monounsaturated Fat,Trans Fat,Cholesterol,Sodium (mg),Potassium,Carbohydrates (g),Fiber,Sugar,Protein (g),Vitamin A,Vitamin C,Calcium,Iron,Note";
            await csv.ReadAsync();
            csv.ReadHeader();
            if (!csv.HeaderRecord.SequenceEqual(expectedHeaderValues.Split(",")))
            {
                var fileName = fs.Name;
                File.Delete(fileName);
                loadingSuccess = false;
                await JSRuntime.InvokeVoidAsync("alert", $"{e.File.Name} does not have the expected headers, aborting.");
                Logger.LogError("File: {FileName} Error: File does not have the expected headers, aborting.", e.File.Name);
            }
            
            else
            {
                records = csv.GetRecordsAsync<NutritionModel>();
                loadingSuccess = true;
            }
                       
        }
        else
        {
            File.Delete(e.File.Name);
            loadingSuccess = false;
            await JSRuntime.InvokeVoidAsync("alert", $"File: {e.File.Name} Error: File uploaded exceeds maximum limit, or is not a CSV file. Aborting.");
            Logger.LogError("File: {FileName} Error: File uploaded exceeds maximum limit, or is not a CSV file. Aborting.", e.File.Name);
        }
    }

    /* TBD -- need to find a way that secures down the API key
    private async Task RunVirusScanner()
    {
        var options = new RestClientOptions("https://www.virustotal.com/api/v3/files");
        var client = new RestClient(options);
        var request = new RestRequest("");
        request.AlwaysMultipartFormData = true;
        request.AddHeader("accept", "application/json");
        request.AddHeader("x-apikey", APIKEY);
        request.FormBoundary = "---011000010111000001101001";
        request.AddFile("file", loadedFile.Name);
        var response = await client.PostAsync(request);
        Console.WriteLine("{0}", response.Content);
    }*/
}